import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Optional; // For cleaner null checks from find methods
import java.util.Scanner;
import java.util.InputMismatchException;

public class Test {
    private static VehiclePark park;
    private static final String DATA_FILE = "vpark_data.dat";
    private static Scanner scanner = new Scanner(System.in);
    // Date format for user input and output consistency
    private static SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
    private static boolean dataWasSuccessfullyLoaded = false; // Flag to check if data was loaded

    public static void main(String[] args) {
        dateFormat.setLenient(false); // Strict date parsing
        loadData();

        // Populate initial data only if no data was loaded and the park is truly empty
        if (!dataWasSuccessfullyLoaded && park.getAllVehicles().isEmpty() && park.getRegisteredCustomers().isEmpty()) {
            System.out.println("No existing data found. Populating with initial test data...");
            populateInitialData();
        }

        boolean running = true;
        while (running) {
            System.out.println("\nWelcome to VPark Vehicle Hiring System");
            System.out.println("Select your role:");
            System.out.println("1. Admin");
            System.out.println("2. Customer");
            System.out.println("0. Exit System");
            System.out.print("Enter your choice: ");

            int roleChoice = getIntInput();

            switch (roleChoice) {
                case 1:
                    adminMenu();
                    break;
                case 2:
                    customerMenu();
                    break;
                case 0:
                    running = false;
                    System.out.println("Exiting system...");
                    break;
                case -1: // Invalid input already handled by getIntInput
                    break;
                default:
                    System.err.println("Invalid role choice. Please try again.");
            }
        }

        saveData();
        scanner.close();
        System.out.println("Thank you for using VPark!");
    }

    private static void loadData() {
        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(DATA_FILE))) {
            park = (VehiclePark) ois.readObject();
            // Crucially, after loading, update static counters in Vehicle and Customer classes
            // This is now handled inside VehiclePark's setAllVehicles/setRegisteredCustomers
            // which are implicitly called during deserialization if they were part of the saved state,
            // or if we explicitly call them if 'park' contains only the lists.
            // For safety, if VehiclePark's constructor does not call its own setters,
            // we might need to call them here or ensure counters are set correctly.
            // The current VehiclePark setters WILL update the static counters.
            System.out.println("Data loaded successfully from " + DATA_FILE);
            dataWasSuccessfullyLoaded = true;
        } catch (IOException | ClassNotFoundException e) {
            System.out.println("No existing data or error loading data (" + e.getMessage() + "). Starting with a new VehiclePark.");
            park = new VehiclePark();
            // Reset static counters for a fresh start if no data is loaded
            Vehicle.updateNextIdSuffix(0);
            Customer.updateNextIdSuffix(0);
            dataWasSuccessfullyLoaded = false;
        }
    }

    private static void saveData() {
        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(DATA_FILE))) {
            oos.writeObject(park);
            System.out.println("Data saved successfully to " + DATA_FILE);
        } catch (IOException e) {
            System.err.println("Error saving data: " + e.getMessage());
        }
    }

    private static void populateInitialData() {
        System.out.println("Populating initial data as park is empty...");
        // IDs will be generated by Vehicle/Customer constructors
        Customer cust1 = new Customer("Alice Wonderland", "alice@example.com");
        Customer cust2 = new Customer("Bob The Builder", "bob@example.com");
        park.addCustomer(cust1);
        park.addCustomer(cust2);

        Car sportsCar = new SportsCar("SP001", "Ferrari", "488 Spider", 4, 300.00, "Red", 2, 2, 670);
        Car suv = new SUV("SV001", "Toyota", "RAV4", 4, 150.00, "Blue", 5, 4, "AWD");
        Car stationWagon = new StationWagon("SW001", "Volvo", "V60", 4, 120.00, "Silver", 5, 4, 500.0);
        Truck smallTruck = new SmallTruck("ST001", "Ford", "Ranger", 4, 180.00, 1.5);
        Truck transportTruck = new TransportTruck("TT001", "Mercedes", "Actros", 6, 400.00, 20.0, false);

        park.addVehicle(sportsCar);
        park.addVehicle(suv);
        park.addVehicle(stationWagon);
        park.addVehicle(smallTruck);
        park.addVehicle(transportTruck);

        System.out.println("Initial data populated.");
        System.out.println("Example Customer ID: " + cust1.getCustomerId() + ", Example Vehicle ID: " + sportsCar.getId());
    }

    private static int getIntInput() {
        int choice = -1;
        if (scanner.hasNextInt()) {
            choice = scanner.nextInt();
        } else {
            System.err.println("Invalid input. Please enter a whole number.");
        }
        scanner.nextLine(); // Always consume the rest of the line
        return choice;
    }

    private static double getDoubleInput() {
        double choice = -1;
        if (scanner.hasNextDouble()) {
            choice = scanner.nextDouble();
        } else {
            System.err.println("Invalid input. Please enter a number (e.g., 120.50).");
        }
        scanner.nextLine(); // Always consume the rest of the line
        return choice;
    }
    
    private static boolean getBooleanInput(String prompt) {
        while (true) {
            System.out.print(prompt + " (true/false): ");
            String input = scanner.nextLine().trim().toLowerCase();
            if ("true".equals(input)) return true;
            if ("false".equals(input)) return false;
            System.err.println("Invalid input. Please enter 'true' or 'false'.");
        }
    }


    private static Date getDateInput(String prompt) {
        Date date = null;
        while (date == null) {
            System.out.print(prompt + " (dd/MM/yyyy): ");
            String dateStr = scanner.nextLine().trim();
            if (dateStr.equalsIgnoreCase("cancel")) return null;
            try {
                date = dateFormat.parse(dateStr);
                // Optional: Check if the parsed date is in the past for start dates
                // if (prompt.toLowerCase().contains("start") && date.before(new Date(System.currentTimeMillis() - 24*60*60*1000))) { // yesterday
                //    System.err.println("Start date cannot be in the past.");
                //    date = null;
                // }
            } catch (ParseException e) {
                System.err.println("Invalid date format. Please use dd/MM/yyyy or type 'cancel'.");
            }
        }
        return date;
    }

    private static void adminMenu() {
        boolean adminRunning = true;
        while (adminRunning) {
            System.out.println("\n--- Admin Menu ---");
            System.out.println("1. Display All Vehicles");
            System.out.println("2. Display Available Vehicles (by date)");
            System.out.println("3. Add New Vehicle");
            System.out.println("4. Remove Vehicle");
            System.out.println("5. Generate Daily Report");
            System.out.println("6. Display All Customers");
            System.out.println("0. Back to Main Menu");
            System.out.print("Enter your choice: ");
            int choice = getIntInput();

            switch (choice) {
                case 1: park.displayAllVehicles(); break;
                case 2: handleDisplayAvailableVehicles(false); break;
                case 3: handleAddVehicle(); break;
                case 4: handleRemoveVehicle(); break;
                case 5: handleDailyReport(); break;
                case 6: park.displayAllCustomers(); break;
                case 0: adminRunning = false; break;
                case -1: /* Invalid input already handled */ break;
                default: System.err.println("Invalid choice. Please try again.");
            }
        }
    }

    private static void customerMenu() {
        System.out.print("Enter your Customer ID (e.g., CUST-1): ");
        String customerId = scanner.nextLine().trim();
        Optional<Customer> customerOpt = park.findCustomerById(customerId);

        if (!customerOpt.isPresent()) {
            System.err.println("Customer ID '" + customerId + "' not found. Returning to main menu.");
            return;
        }
        System.out.println("Welcome, " + customerOpt.get().getName() + "!");

        boolean customerRunning = true;
        while (customerRunning) {
            System.out.println("\n--- Customer Menu (" + customerOpt.get().getName() + ") ---");
            System.out.println("1. Display All Vehicles");
            System.out.println("2. Display Available Vehicles (by date)");
            System.out.println("3. Display Available Vehicles (by date and type)");
            System.out.println("4. Book a Vehicle");
            System.out.println("5. Cancel My Booking");
            System.out.println("6. Rent a Vehicle");
            System.out.println("7. Drop a Vehicle");
            System.out.println("8. Load a Vehicle");
            System.out.println("0. Back to Main Menu (Logout)");
            System.out.print("Enter your choice: ");
            int choice = getIntInput();

            switch (choice) {
                case 1: park.displayAllVehicles(); break;
                case 2: handleDisplayAvailableVehicles(false); break;
                case 3: handleDisplayAvailableVehicles(true); break;
                case 4: handleBookVehicle(customerId); break;
                case 5: handleCancelBooking(customerId); break;
                case 6: handleRentVehicle(customerId); break;
                case 7: handleDropVehicle(customerId); break;
                case 8: handleLoadVehicle(customerId); break;
                case 0: customerRunning = false; break;
                case -1: /* Invalid input already handled */ break;
                default: System.err.println("Invalid choice. Please try again.");
            }
        }
    }

    private static void handleDisplayAvailableVehicles(boolean byType) {
        System.out.println("Enter desired period for vehicle availability:");
        Date startDate = getDateInput("Start date");
        if (startDate == null) { System.out.println("Operation cancelled."); return; }
        Date endDate = getDateInput("End date");
        if (endDate == null) { System.out.println("Operation cancelled."); return; }

        if (startDate.after(endDate)) {
            System.err.println("Start date cannot be after end date.");
            return;
        }

        if (byType) {
            System.out.print("Enter vehicle type (e.g., SportsCar, SUV, SmallTruck, Car, Truck): ");
            String type = scanner.nextLine().trim();
            if (type.isEmpty()){ System.err.println("Vehicle type cannot be empty."); return;}
            park.displayAvailableVehicles(startDate, endDate, type);
        } else {
            park.displayAvailableVehicles(startDate, endDate);
        }
    }

    private static void handleAddVehicle() {
        System.out.println("--- Add New Vehicle ---");
        System.out.print("Enter vehicle category (Car/Truck): ");
        String category = scanner.nextLine().trim();

        System.out.print("Plate Number: "); String plateNo = scanner.nextLine().trim();
        if (plateNo.isEmpty()) { System.err.println("Plate number cannot be empty."); return; }
        System.out.print("Brand: "); String brand = scanner.nextLine().trim();
        System.out.print("Model: "); String modelStr = scanner.nextLine().trim();

        System.out.print("Number of Tires: "); int tires = getIntInput(); if(tires <= 0) { System.err.println("Invalid number of tires."); return; }
        System.out.print("Daily Fee: "); double dailyFee = getDoubleInput(); if(dailyFee <= 0) { System.err.println("Invalid daily fee."); return; }

        Vehicle newVehicle = null;
        if ("Car".equalsIgnoreCase(category)) {
            System.out.print("Color: "); String color = scanner.nextLine().trim();
            System.out.print("Seating Capacity: "); int seating = getIntInput(); if(seating <= 0) { System.err.println("Invalid seating capacity."); return; }
            System.out.print("Number of Doors: "); int doors = getIntInput(); if(doors <= 0) { System.err.println("Invalid number of doors."); return; }

            System.out.print("Car Subtype (SportsCar/SUV/StationWagon): "); String subtype = scanner.nextLine().trim();
            if ("SportsCar".equalsIgnoreCase(subtype)) {
                System.out.print("Horsepower (HP): "); int hp = getIntInput(); if(hp <= 0) { System.err.println("Invalid HP."); return; }
                newVehicle = new SportsCar(plateNo, brand, modelStr, tires, dailyFee, color, seating, doors, hp);
            } else if ("SUV".equalsIgnoreCase(subtype)) {
                System.out.print("Wheel Drive Type (RWD/FWD/4WD/AWD): "); String wd = scanner.nextLine().trim().toUpperCase();
                newVehicle = new SUV(plateNo, brand, modelStr, tires, dailyFee, color, seating, doors, wd);
            } else if ("StationWagon".equalsIgnoreCase(subtype)) {
                System.out.print("Loading Capacity (units): "); double swCapacity = getDoubleInput(); if(swCapacity <= 0) { System.err.println("Invalid SW capacity."); return; }
                newVehicle = new StationWagon(plateNo, brand, modelStr, tires, dailyFee, color, seating, doors, swCapacity);
            } else { System.err.println("Invalid car subtype: " + subtype); return; }
        } else if ("Truck".equalsIgnoreCase(category)) {
            System.out.print("Loading Capacity (tons): "); double truckCapacity = getDoubleInput(); if(truckCapacity <= 0) { System.err.println("Invalid truck capacity."); return; }
            System.out.print("Truck Subtype (SmallTruck/TransportTruck): "); String subtype = scanner.nextLine().trim();

            if ("SmallTruck".equalsIgnoreCase(subtype)) {
                newVehicle = new SmallTruck(plateNo, brand, modelStr, tires, dailyFee, truckCapacity);
            } else if ("TransportTruck".equalsIgnoreCase(subtype)) {
                boolean goesAbroad = getBooleanInput("Goes Abroad?");
                newVehicle = new TransportTruck(plateNo, brand, modelStr, tires, dailyFee, truckCapacity, goesAbroad);
            } else { System.err.println("Invalid truck subtype: " + subtype); return; }
        } else { System.err.println("Invalid vehicle category: " + category); return; }

        if (newVehicle != null) park.addVehicle(newVehicle);
    }

    private static void handleRemoveVehicle() {
        System.out.print("Enter ID of vehicle to remove (e.g., VEH-1): ");
        String id = scanner.nextLine().trim();
        if (id.isEmpty()) { System.err.println("Vehicle ID cannot be empty."); return; }
        park.removeVehicle(id);
    }

    private static void handleDailyReport() {
        System.out.print("Enter filename for the daily report (e.g., daily_report.txt): ");
        String fileName = scanner.nextLine().trim();
        if (fileName.isEmpty()) {
            System.err.println("Filename cannot be empty.");
            fileName = "daily_report_" + new SimpleDateFormat("yyyyMMdd").format(new Date()) + ".txt"; // Default filename
            System.out.println("Using default filename: " + fileName);
        }
        park.dailyReport(fileName);
    }

    private static void handleBookVehicle(String customerId) {
        System.out.print("Enter Vehicle ID to book (e.g., VEH-1): ");
        String vehicleId = scanner.nextLine().trim();
        if (vehicleId.isEmpty()) { System.err.println("Vehicle ID cannot be empty."); return; }

        System.out.println("Enter booking period:");
        Date startDate = getDateInput("Start date");
        if (startDate == null) { System.out.println("Booking cancelled."); return; }
        Date endDate = getDateInput("End date");
        if (endDate == null) { System.out.println("Booking cancelled."); return; }

        if (startDate.after(endDate)) {
            System.err.println("Start date cannot be after end date.");
            return;
        }
        park.bookVehicle(vehicleId, customerId, startDate, endDate);
    }

    private static void handleCancelBooking(String customerId) {
        System.out.print("Enter Vehicle ID of the booking to cancel (e.g., VEH-1): ");
        String vehicleId = scanner.nextLine().trim();
        if (vehicleId.isEmpty()) { System.err.println("Vehicle ID cannot be empty."); return; }

        System.out.println("Enter period of the booking to cancel:");
        Date startDate = getDateInput("Start date of booking");
        if (startDate == null) { System.out.println("Cancellation cancelled."); return; }
        Date endDate = getDateInput("End date of booking");
        if (endDate == null) { System.out.println("Cancellation cancelled."); return; }
        
        if (startDate.after(endDate)) { // Though cancelMe in Vehicle will also check
            System.err.println("Start date cannot be after end date for cancellation period.");
            return;
        }
        park.cancelBooking(vehicleId, customerId, startDate, endDate);
    }

    private static void handleRentVehicle(String customerId) {
        System.out.print("Enter Vehicle ID to rent (e.g., VEH-1): ");
        String vehicleId = scanner.nextLine().trim();
        if (vehicleId.isEmpty()) { System.err.println("Vehicle ID cannot be empty."); return; }

        Optional<Vehicle> vehicleOpt = park.findVehicleById(vehicleId);
        if (!vehicleOpt.isPresent()) {
            System.err.println("Vehicle with ID " + vehicleId + " not found.");
            return;
        }
        Vehicle vehicleToRent = vehicleOpt.get();

        System.out.println("Enter rental period:");
        Date startDate = getDateInput("Start date");
        if (startDate == null) { System.out.println("Rental cancelled."); return; }
        Date endDate = getDateInput("End date");
        if (endDate == null) { System.out.println("Rental cancelled."); return; }

        if (startDate.after(endDate)) {
            System.err.println("Start date cannot be after end date.");
            return;
        }

        String deliveryLocation = "";
        String dropOffLocation = "";

        if (vehicleToRent.isRemoteDeliverable()) {
            System.out.print("Enter delivery location (or leave blank if not applicable): ");
            deliveryLocation = scanner.nextLine().trim();
        }
        if (vehicleToRent.isRemoteDroppable()) {
             System.out.print("Enter drop-off location (or leave blank if not applicable/same as rental office): ");
             dropOffLocation = scanner.nextLine().trim();
        }

        park.rentVehicle(vehicleId, customerId, startDate, endDate, deliveryLocation, dropOffLocation);
    }

    private static void handleDropVehicle(String customerId) {
        System.out.print("Enter Vehicle ID to drop off (e.g., VEH-1): ");
        String vehicleId = scanner.nextLine().trim();
        if (vehicleId.isEmpty()) { System.err.println("Vehicle ID cannot be empty."); return; }
        park.dropVehicle(vehicleId, customerId);
    }

    private static void handleLoadVehicle(String customerId) {
        System.out.print("Enter Vehicle ID to load (e.g., VEH-1): ");
        String vehicleId = scanner.nextLine().trim();
        if (vehicleId.isEmpty()) { System.err.println("Vehicle ID cannot be empty."); return; }

        System.out.print("Enter amount to load: ");
        double amount = getDoubleInput();
        if (amount <= 0) { // getDoubleInput returns -1 on error, which is caught here too
            System.err.println("Load amount must be a positive number.");
            return;
        }
        park.loadVehicle(vehicleId, customerId, amount);
    }
}